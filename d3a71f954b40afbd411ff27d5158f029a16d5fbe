{
  "comments": [
    {
      "key": {
        "uuid": "79894757_eb9ab61d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 11,
      "author": {
        "id": 1017443
      },
      "writtenOn": "2020-01-14T16:12:03Z",
      "side": 1,
      "message": "license",
      "range": {
        "startLine": 11,
        "startChar": 18,
        "endLine": 11,
        "endChar": 26
      },
      "revId": "d3a71f954b40afbd411ff27d5158f029a16d5fbe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70ba7a62_6a752669",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1017443
      },
      "writtenOn": "2020-01-14T16:12:03Z",
      "side": 1,
      "message": "known",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 15,
        "endChar": 25
      },
      "revId": "d3a71f954b40afbd411ff27d5158f029a16d5fbe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f77e731_d9ce2a5a",
        "filename": "docs/specs/package-specfile.rst",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1017443
      },
      "writtenOn": "2020-01-14T16:12:03Z",
      "side": 1,
      "message": ", or a",
      "range": {
        "startLine": 67,
        "startChar": 26,
        "endLine": 67,
        "endChar": 27
      },
      "revId": "d3a71f954b40afbd411ff27d5158f029a16d5fbe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e54b73d9_62b7f64e",
        "filename": "src/mmpack-build/src_package.py",
        "patchSetId": 7
      },
      "lineNbr": 472,
      "author": {
        "id": 1017133
      },
      "writtenOn": "2020-01-14T16:08:34Z",
      "side": 1,
      "message": "This cannot work this way... Imagine the scenario:\n 1 - I install my own version of mmpack in my home.\n 2 - with my local mmpack install, I create a mmpack package of foo.\n 3 - I distribute foo the repo \"http://the_repo\"\n 4 - bob has mmpack packaged in debian\n 5 - he installs foo from \"http://the_repo\"\n 6 - the symlink to the standard licenses that foo used points to nothing",
      "range": {
        "startLine": 468,
        "startChar": 12,
        "endLine": 472,
        "endChar": 75
      },
      "revId": "d3a71f954b40afbd411ff27d5158f029a16d5fbe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9daf812_54b075be",
        "filename": "src/mmpack-build/src_package.py",
        "patchSetId": 7
      },
      "lineNbr": 472,
      "author": {
        "id": 1017136
      },
      "writtenOn": "2020-01-14T16:33:29Z",
      "side": 1,
      "message": "That is true.\nThat being said, I do not know if it is possible to guess from the package manager side how the package consumer installed mmpack. You example is about a custom install to a debian install, but the reverse would trigger the same issue.\nThe only other solution is to have the licenses within the prefix itself.\n\nThis is more complicated than I thought.\nI will do a first pass without the symlinks nor the list of common-licenses, and write this optimization afterwards.",
      "parentUuid": "e54b73d9_62b7f64e",
      "range": {
        "startLine": 468,
        "startChar": 12,
        "endLine": 472,
        "endChar": 75
      },
      "revId": "d3a71f954b40afbd411ff27d5158f029a16d5fbe",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}