# vi:syntax=sh
#
# completion script for mmpack commands (to be sourced)

_mmpack_complete_run() {
    local offset i
    local prefix_bin=$1/bin
    local PATH="$prefix_bin:$PATH"

    # find actual offset, as position of the first argument after run
    for (( i=1; i < COMP_CWORD; i++ )); do
        if [[ "${COMP_WORDS[i]}" == "run" ]]; then
            offset=$((i+1))
            break
        fi
    done

    # If we are completing the command, limit proposal to the prefix bin
    if [[ $COMP_CWORD -eq $offset ]]; then
	COMPREPLY=( $( compgen -W "$(ls $prefix_bin 2> /dev/null)" -- "${COMP_WORDS[COMP_CWORD]}" ) )
	return 0
    fi

    _command_offset $offset
}

_mmpack_completion() {
    local cur prev
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}

    # If completion is done on empty word AND we are not completing long option
    # value, then we invoked the command with an explicit "" final arg
    # Without, the completion would have been done on previous arg
    if [[ "$cur" == "" && "$prev" != "=" ]]; then
        COMPREPLY=($(MMLIB_CMD_COMPLETION=yes $COMP_LINE "" 2>/dev/null))
    else
        COMPREPLY=($(MMLIB_CMD_COMPLETION=yes $COMP_LINE 2>/dev/null))
    fi

    # If run command, the first element in COMPREPLY is
    # "execute_run_completion" and the second is the prefix used
    if [[ ${#COMPREPLY[@]} -eq 2 && ${COMPREPLY[0]} == "execute_run_completion" ]]; then
        _mmpack_complete_run ${COMPREPLY[1]}
        return 0
    fi

    # if there is only one possibility, do not add space if string finishes
    # by '='. In such a case, we are completing the value of a long
    # option... Same if it finishes with '/': we are completing a path
    if [[ ${#COMPREPLY[@]} -eq 1 && ${COMPREPLY[0]} == *[=/] ]]; then
        compopt -o nospace
    fi
}
complete -F _mmpack_completion mmpack
